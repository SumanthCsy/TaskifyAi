import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Download, Loader2, AlertCircle } from "lucide-react";
import { motion } from "framer-motion";
import { marked } from "marked";
import { generateAndDownloadPdf, downloadPdf } from "@/lib/pdf-generator";

interface PDFViewerProps {
  content: string;
  title: string;
}

export default function PDFViewer({ content, title }: PDFViewerProps) {
  const [isLoading, setIsLoading] = useState(true);
  const [isDownloading, setIsDownloading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    if (content) {
      setIsLoading(false);
      setError(null);
    }
  }, [content]);

  const handleDownloadPDF = async () => {
    setIsDownloading(true);
    setError(null);
    
    try {
      // Use our advanced PDF generation utility with fallback support
      // Try dynamic import for jsPDF as it's a large library
      const jsPDFModule = await import('jspdf');
      const { jsPDF } = jsPDFModule;
      
      const doc = new jsPDF();
      
      // Add title with proper styling
      doc.setFont("helvetica", "bold");
      doc.setFontSize(22);
      doc.text(title, 20, 20);
      
      // Add date with better formatting
      doc.setFont("helvetica", "normal");
      doc.setFontSize(12);
      doc.setTextColor(100, 100, 100);
      const formattedDate = new Date().toLocaleString(undefined, {
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      doc.text(`Generated on: ${formattedDate}`, 20, 30);
      
      // Reset text color for content
      doc.setTextColor(0, 0, 0);
      
      // Process markdown headers and line breaks for better PDF layout
      const cleanContent = content
        .replace(/#{1,6}\s+/g, '') // Remove markdown headers
        .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold markers
        .replace(/\*(.*?)\*/g, '$1') // Remove italic markers
        .replace(/\n- /g, '\nâ€¢ ') // Convert list items to bullet points
        .replace(/\n\n/g, '\n') // Normalize line breaks
        .trim();
      
      // Split text to fit page width and for pagination
      const splitText = doc.splitTextToSize(cleanContent, 170);
      
      // Write content with pagination
      let y = 40;
      splitText.forEach((line: string) => {
        // Add new page when needed
        if (y > 270) {
          doc.addPage();
          y = 20;
        }
        
        // Add the line
        doc.text(line, 20, y);
        y += 7;
      });
      
      // Add page numbers and footer
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.setTextColor(150, 150, 150);
        doc.text(`Page ${i} of ${pageCount} | Generated by Taskify AI`, 20, 290);
      }
      
      // Get PDF as blob and download using our utility with fallback support
      const pdfBlob = doc.output('blob');
      downloadPdf(pdfBlob, title.replace(/\s+/g, '_'));
      
    } catch (error) {
      console.error("Error generating PDF:", error);
      setError("There was a problem generating the PDF. We'll try an alternative method.");
      
      // Fallback to simplified PDF generation
      try {
        generateAndDownloadPdf(title, content);
      } catch (fallbackError) {
        console.error("Fallback PDF generation also failed:", fallbackError);
        setError("PDF generation failed. Please try again or use a different browser.");
      }
    } finally {
      setIsDownloading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="w-full"
    >
      <Card className="border overflow-hidden">
        <div className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">{title}</h2>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleDownloadPDF}
              disabled={isDownloading}
              className="flex items-center gap-2"
            >
              {isDownloading ? (
                <>
                  <Loader2 size={16} className="animate-spin" />
                  Preparing PDF...
                </>
              ) : (
                <>
                  <Download size={16} />
                  Download PDF
                </>
              )}
            </Button>
          </div>
          
          {/* Error message display */}
          {error && (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-3 mb-4 flex items-start gap-2">
              <AlertCircle className="h-5 w-5 text-red-500 shrink-0 mt-0.5" />
              <div>
                <p className="text-sm text-red-800 dark:text-red-300">{error}</p>
                <p className="text-xs text-red-600 dark:text-red-400 mt-1">
                  You can still access the report content in the preview below.
                </p>
              </div>
            </div>
          )}
          
          {/* Content Preview */}
          <div className="prose prose-sm max-w-none dark:prose-invert border rounded-md p-6 h-[450px] overflow-y-auto bg-white dark:bg-gray-900">
            <div dangerouslySetInnerHTML={{ __html: marked(content) }} />
          </div>
          
          {/* Helpful tip */}
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-3 italic">
            Tip: To save this report, click the Download PDF button above.
          </p>
        </div>
      </Card>
    </motion.div>
  );
}
